/**
 * OpenGL 2.0 Accessor — Programmable pipeline (shaders, programs), generic vertex attributes, and enhanced draw/blend/stencil support.
 *
 * <p>Extends {@link GL15Accessor} by introducing the programmable pipeline with
 * shaders and programs, uniform and attribute variables, as well as multiple render targets
 * and more flexible stencil/blend control.</p>
 *
 * <h2>Shader and Program Objects</h2>
 * <ul>
 *   <li>{@code glCreateShader}, {@code glDeleteShader}, {@code glIsShader} —
 *       Manage shader object lifetimes.</li>
 *   <li>{@code glShaderSource} — Upload GLSL source code to a shader object.</li>
 *   <li>{@code glCompileShader} — Compile the shader source into executable form.</li>
 *   <li>{@code glCreateProgram}, {@code glDeleteProgram}, {@code glIsProgram} —
 *       Manage program object lifetimes.</li>
 *   <li>{@code glAttachShader}, {@code glDetachShader} — Link/unlink shader objects with a program.</li>
 *   <li>{@code glLinkProgram} — Link all attached shaders into a complete program pipeline.</li>
 *   <li>{@code glUseProgram} — Bind a program for subsequent rendering.</li>
 *   <li>{@code glValidateProgram} — Validate a program against the current pipeline state.</li>
 *   <li>{@code glGetShaderiv}, {@code glGetShaderi}, {@code glGetProgramiv}, {@code glGetProgrami} —
 *       Query shader/program object parameters (compile status, link status, info log length, etc.).</li>
 *   <li>{@code glGetShaderInfoLog}, {@code glGetProgramInfoLog} — Retrieve compiler or linker error messages.</li>
 *   <li>{@code glGetAttachedShaders} — Enumerate shaders attached to a program.</li>
 *   <li>{@code glGetShaderSource} — Retrieve the source code string of a shader object.</li>
 * </ul>
 *
 * <h2>Uniform Variables</h2>
 * <ul>
 *   <li>{@code glGetUniformLocation} — Retrieve the location of a named uniform variable.</li>
 *   <li>{@code glUniform1/2/3/4f, glUniform1/2/3/4i} — Set uniform variables with scalar values.</li>
 *   <li>{@code glUniform*fv}, {@code glUniform*iv} — Set uniforms using array/vector values.</li>
 *   <li>{@code glUniformMatrix2fv}, {@code glUniformMatrix3fv}, {@code glUniformMatrix4fv} —
 *       Upload matrix values to uniform variables.</li>
 *   <li>{@code glGetUniformfv}, {@code glGetUniformiv}, {@code glGetUniformf}, {@code glGetUniformi} —
 *       Query uniform values currently stored in a program object.</li>
 *   <li>{@code glGetActiveUniform} — Query information about an active uniform (name, type, size).</li>
 * </ul>
 *
 * <h2>Generic Vertex Attributes</h2>
 * <ul>
 *   <li>{@code glVertexAttrib*} — Define generic per-vertex attribute values (1–4 components, multiple types).</li>
 *   <li>{@code glVertexAttribPointer} — Specify array-based data sources for vertex attributes.</li>
 *   <li>{@code glEnableVertexAttribArray}, {@code glDisableVertexAttribArray} —
 *       Enable/disable per-vertex attribute arrays.</li>
 *   <li>{@code glBindAttribLocation} — Assign a vertex attribute index to a variable name before linking.</li>
 *   <li>{@code glGetActiveAttrib} — Query information about an active attribute (name, type, size).</li>
 *   <li>{@code glGetAttribLocation} — Retrieve the index of a named attribute variable.</li>
 *   <li>{@code glGetVertexAttrib*i/f/d/v}, {@code glGetVertexAttribPointerv} —
 *       Query current values or array pointer of vertex attributes.</li>
 * </ul>
 *
 * <h2>Multiple Render Targets</h2>
 * <ul>
 *   <li>{@code glDrawBuffers} — Specify an array of color buffers as rendering targets, enabling MRT (multiple render targets).</li>
 * </ul>
 *
 * <h2>Advanced Blending and Stencil</h2>
 * <ul>
 *   <li>{@code glBlendEquationSeparate} — Specify separate blend equations for RGB and alpha channels.</li>
 *   <li>{@code glStencilOpSeparate} — Configure stencil operations per face (front/back) separately.</li>
 *   <li>{@code glStencilFuncSeparate} — Configure stencil test functions separately for front and back faces.</li>
 *   <li>{@code glStencilMaskSeparate} — Control writable bits in stencil buffer per face.</li>
 * </ul>
 *
 * <h3>Notes</h3>
 * <ul>
 *   <li>OpenGL 2.0 introduces GLSL as a first-class shading language; most fixed-function shading features
 *       are now programmable.</li>
 *   <li>Uniforms are program-object state, not global GL state — they change with {@code glUseProgram}.</li>
 *   <li>Generic attributes replace legacy fixed-function attributes (e.g., {@code glColor}, {@code glNormal}).</li>
 *   <li>MRTs allow writing to several color attachments in one pass, useful for deferred shading.</li>
 * </ul>
 */
