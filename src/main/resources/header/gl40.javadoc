/**
 * OpenGL 4.0 Accessor — Indexed blending, indirect drawing, double-precision uniforms,
 * shader subroutines, tessellation patch parameters, transform feedback objects, and
 * indexed queries with per-stage introspection.
 *
 * <p>Extends {@link GL33Accessor} with features aimed at reducing CPU overhead,
 * improving numerical precision, and enabling more dynamic shader control.</p>
 *
 * <h2>Per-Draw-Buffer (Indexed) Blending</h2>
 * <ul>
 *   <li>{@code glBlendEquationi}, {@code glBlendEquationSeparatei} —
 *       Set blend equation(s) for a specific color attachment index.</li>
 *   <li>{@code glBlendFunci}, {@code glBlendFuncSeparatei} —
 *       Set blend factors per draw buffer; separate RGB vs. alpha variants supported.</li>
 * </ul>
 *
 * <h2>Indirect Drawing</h2>
 * <ul>
 *   <li>{@code glDrawArraysIndirect}, {@code glDrawElementsIndirect} —
 *       Issue draws whose parameters are read from a buffer object, enabling GPU-driven
 *       multi-draw workflows with minimal CPU involvement.</li>
 * </ul>
 *
 * <h2>Double-Precision Uniforms</h2>
 * <ul>
 *   <li>{@code glUniform1/2/3/4d}, {@code glUniform1/2/3/4dv} —
 *       Upload double-precision scalar/vector uniforms.</li>
 *   <li>{@code glUniformMatrix2/3/4dv}, {@code glUniformMatrix2x3/2x4/3x2/3x4/4x2/4x3dv} —
 *       Upload double-precision matrix uniforms (square and non-square).</li>
 *   <li>{@code glGetUniformdv}, {@code glGetUniformd} — Read back double-precision uniform values.</li>
 * </ul>
 *
 * <h2>Shader Subroutines</h2>
 * <ul>
 *   <li>{@code glGetSubroutineUniformLocation}, {@code glGetSubroutineIndex} —
 *       Query locations/indices of subroutine uniforms and subroutine functions.</li>
 *   <li>{@code glGetActiveSubroutineUniformiv}, {@code glGetActiveSubroutineUniformi},
 *       {@code glGetActiveSubroutineUniformName} —
 *       Inspect subroutine uniform metadata (name, size, compatibilities).</li>
 *   <li>{@code glGetActiveSubroutineName} — Query subroutine function names.</li>
 *   <li>{@code glUniformSubroutinesuiv}, {@code glUniformSubroutinesui} —
 *       Select the active subroutine implementation(s) per shader stage at draw time.</li>
 *   <li>{@code glGetUniformSubroutineuiv}, {@code glGetUniformSubroutineui} —
 *       Query current subroutine selections.</li>
 *   <li>{@code glGetProgramStageiv}, {@code glGetProgramStagei} —
 *       Per-stage program queries (e.g., active subroutines, uniform counts).</li>
 * </ul>
 *
 * <h2>Sample Shading</h2>
 * <ul>
 *   <li>{@code glMinSampleShading} — Specify the minimum fraction of samples that
 *       must be evaluated per fragment (enables per-sample shading effects).</li>
 * </ul>
 *
 * <h2>Tessellation Patch Parameters</h2>
 * <ul>
 *   <li>{@code glPatchParameteri}, {@code glPatchParameterfv} —
 *       Define tessellation patch parameters such as control-point count
 *       and default inner/outer tessellation levels.</li>
 * </ul>
 *
 * <h2>Transform Feedback Objects</h2>
 * <ul>
 *   <li>{@code glGenTransformFeedbacks}, {@code glDeleteTransformFeedbacks},
 *       {@code glBindTransformFeedback}, {@code glIsTransformFeedback} —
 *       Manage transform feedback objects (capture state/resources).</li>
 *   <li>{@code glPauseTransformFeedback}, {@code glResumeTransformFeedback} —
 *       Temporarily suspend/resume capturing.</li>
 *   <li>{@code glDrawTransformFeedback}, {@code glDrawTransformFeedbackStream} —
 *       Draw primitives captured by transform feedback, optionally per stream.</li>
 * </ul>
 *
 * <h2>Indexed Queries</h2>
 * <ul>
 *   <li>{@code glBeginQueryIndexed}, {@code glEndQueryIndexed} —
 *       Begin/end a query on a specific index (e.g., per-target statistics).</li>
 *   <li>{@code glGetQueryIndexediv}, {@code glGetQueryIndexedi} —
 *       Retrieve parameters/results of indexed queries.</li>
 * </ul>
 *
 * <h3>Notes</h3>
 * <ul>
 *   <li>Indirect draws require properly formatted parameter buffers and matching bindings.</li>
 *   <li>Double-precision uniforms are consumed by shaders using {@code double}, {@code dvec*}, and {@code dmat*} types.</li>
 *   <li>Subroutines provide function-level indirection inside shaders, allowing dynamic behavior
 *       without relinking programs.</li>
 *   <li>Patch parameters configure tessellation stages; ensure a tessellation control/evaluation
 *       shader pair is active for effects to take place.</li>
 * </ul>
 */
