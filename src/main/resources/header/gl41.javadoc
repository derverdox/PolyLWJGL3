/**
 * OpenGL 4.1 Accessor — Shader binaries/precision queries, float-depth variants,
 * program binaries, separable programs & program pipelines, program-scope uniform updates,
 * double-precision vertex attributes, and indexed viewport/scissor/depth-range arrays.
 *
 * <p>Extends {@link GL40Accessor} with cross-platform utilities (ES compatibility),
 * offline shader/program workflows, pipeline objectization, and expanded per-viewport controls.</p>
 *
 * <h2>Shader Management & Precision Queries</h2>
 * <ul>
 *   <li>{@code glReleaseShaderCompiler} — Hint that the implementation may free internal shader compiler resources.</li>
 *   <li>{@code glShaderBinary} — Load precompiled/binary shader images (implementation-defined formats).</li>
 *   <li>{@code glGetShaderPrecisionFormat}, {@code glGetShaderPrecisionFormat_CORE} —
 *       Query numeric precision/range for shader types and precisions (useful for ES-style precision qualifiers).</li>
 * </ul>
 *
 * <h2>Float Depth Utilities (ES Compatibility)</h2>
 * <ul>
 *   <li>{@code glDepthRangef} — Set depth mapping range using single-precision floats.</li>
 *   <li>{@code glClearDepthf} — Specify the depth clear value as a float.</li>
 * </ul>
 *
 * <h2>Program Binaries</h2>
 * <ul>
 *   <li>{@code glGetProgramBinary}, {@code glProgramBinary} —
 *       Retrieve and load program binaries for faster application startup (offline caching).</li>
 *   <li>{@code glProgramParameteri} — Control program parameters (e.g., mark program separable).</li>
 * </ul>
 *
 * <h2>Separable Programs & Program Pipelines</h2>
 * <ul>
 *   <li>{@code glUseProgramStages}, {@code glActiveShaderProgram} —
 *       Bind specific stages from separable programs into a pipeline, and select the program
 *       targeted by program-uniform updates.</li>
 *   <li>{@code glCreateShaderProgramv} — Create and link a separable program from source in one call.</li>
 *   <li>{@code glBindProgramPipeline}, {@code glGenProgramPipelines}, {@code glDeleteProgramPipelines}, {@code glIsProgramPipeline} —
 *       Manage program pipeline objects.</li>
 *   <li>{@code glGetProgramPipelineiv}/{@code glGetProgramPipelinei}, {@code glValidateProgramPipeline},
 *       {@code glGetProgramPipelineInfoLog} — Inspect/validate pipelines and retrieve diagnostic logs.</li>
 * </ul>
 *
 * <h2>Program-Scoped Uniform Updates</h2>
 * <ul>
 *   <li>{@code glProgramUniform1/2/3/4i}, {@code glProgramUniform1/2/3/4ui}, {@code glProgramUniform1/2/3/4f},
 *       {@code glProgramUniform1/2/3/4d} and their array forms —
 *       Set uniforms on a specific program object without binding it with {@code glUseProgram}.</li>
 *   <li>{@code glProgramUniformMatrix*fv}, {@code glProgramUniformMatrix*dv} (square and non-square) —
 *       Upload matrices directly to a program object.</li>
 * </ul>
 *
 * <h2>Double-Precision Vertex Attributes</h2>
 * <ul>
 *   <li>{@code glVertexAttribL1/2/3/4d}, {@code glVertexAttribL1/2/3/4dv} —
 *       Specify generic vertex attributes in double precision.</li>
 *   <li>{@code glVertexAttribLPointer} — Define array-backed double-precision attribute data.</li>
 *   <li>{@code glGetVertexAttribLdv} — Query double-precision attribute state.</li>
 * </ul>
 *
 * <h2>Indexed Viewports, Scissors, and Depth Ranges</h2>
 * <ul>
 *   <li>{@code glViewportArrayv}, {@code glViewportIndexedf}, {@code glViewportIndexedfv} —
 *       Define per-viewport rectangles (multi-viewport rendering).</li>
 *   <li>{@code glScissorArrayv}, {@code glScissorIndexed}, {@code glScissorIndexedv} —
 *       Per-viewport scissor rectangles.</li>
 *   <li>{@code glDepthRangeArrayv}, {@code glDepthRangeIndexed} —
 *       Per-viewport depth range mapping.</li>
 *   <li>{@code glGetFloati_v}/{@code glGetFloati}, {@code glGetDoublei_v}/{@code glGetDoublei} —
 *       Query indexed floating-point state (e.g., viewport, depth range) per index.</li>
 * </ul>
 *
 * <h3>Notes</h3>
 * <ul>
 *   <li>Mark programs as {@code GL_PROGRAM_SEPARABLE} to use them in pipelines; otherwise they can only be used via {@code glUseProgram}.</li>
 *   <li>Program binaries are implementation-specific; cache and reload only when the binary format matches the current driver.</li>
 *   <li>Program-uniform entry points simplify state management in multi-program, multi-pipeline scenarios.</li>
 *   <li>Indexed viewport/scissor/depth-range enable multi-viewport techniques like stereoscopic or split-screen rendering.</li>
 * </ul>
 */
