/**
 * OpenGL 1.1 Accessor — Fixed-Function Pipeline overview.
 *
 * <p>This accessor aggregates the classic GL 1.1 entry points covering fixed-function state,
 * transformation, rasterization, texturing, lighting/materials, client arrays, selections/feedback,
 * pixel transfer, and queries. Below is a quick index of method families with a short description
 * of what they do. Overloads (e.g., numeric arities and vector forms) are omitted for brevity.</p>
 *
 * <h2>Global state & pipeline control</h2>
 * <ul>
 *   <li>{@code glEnable} / {@code glDisable} — Turn specific capabilities on/off (e.g., GL_BLEND, GL_DEPTH_TEST).</li>
 *   <li>{@code glIsEnabled} — Query whether a capability is enabled.</li>
 *   <li>{@code glHint} — Provide implementation hints (quality vs. performance).</li>
 *   <li>{@code glFrontFace}, {@code glCullFace} — Define front-face winding and back/face culling mode.</li>
 *   <li>{@code glShadeModel} — Select flat/smooth shading.</li>
 *   <li>{@code glLogicOp} — Enable logical pixel operations for color buffer.</li>
 *   <li>{@code glPolygonMode}, {@code glPolygonOffset}, {@code glLineWidth}, {@code glLineStipple},
 *       {@code glPointSize} — Rasterizer fill/offset/line/point controls.</li>
 *   <li>{@code glScissor} — Restrict drawing to a rectangular region.</li>
 *   <li>{@code glBlendFunc}, {@code glAlphaFunc} — Blending and alpha-test configuration.</li>
 *   <li>{@code glDepthFunc}, {@code glDepthMask}, {@code glDepthRange} — Depth testing configuration.</li>
 *   <li>{@code glStencilFunc}, {@code glStencilOp}, {@code glStencilMask} — Stencil testing configuration.</li>
 *   <li>{@code glClear}, {@code glClearColor}, {@code glClearDepth}, {@code glClearStencil}, {@code glClearIndex},
 *       {@code glClearAccum} — Clear buffers and set their clear values.</li>
 *   <li>{@code glAccum} — Operate on the accumulation buffer.</li>
 *   <li>{@code glDrawBuffer}, {@code glReadBuffer} — Select draw/read color buffer.</li>
 *   <li>{@code glFinish}, {@code glFlush} — Synchronize or flush GL command stream.</li>
 *   <li>{@code glGetError}, {@code glGetString} — Error/status and implementation strings.</li>
 * </ul>
 *
 * <h2>Matrices & transformations</h2>
 * <ul>
 *   <li>{@code glMatrixMode} — Select current matrix stack (MODELVIEW, PROJECTION, TEXTURE).</li>
 *   <li>{@code glLoadIdentity}, {@code glLoadMatrix*}, {@code glMultMatrix*} — Load/multiply current matrix.</li>
 *   <li>{@code glTranslate*}, {@code glRotate*}, {@code glScale*} — Apply model transforms.</li>
 *   <li>{@code glFrustum}, {@code glOrtho} — Set projection matrices.</li>
 *   <li>{@code glPushMatrix}, {@code glPopMatrix} — Save/restore current matrix.</li>
 * </ul>
 *
 * <h2>Drawing primitives & client arrays</h2>
 * <ul>
 *   <li>{@code glBegin} / {@code glEnd} — Immediate-mode drawing of primitives.</li>
 *   <li>{@code glVertex*}, {@code glNormal*}, {@code glColor*}, {@code glTexCoord*}, {@code glEdgeFlag*} —
 *       Per-vertex attribute specification (immediate-mode).</li>
 *   <li>{@code glDrawArrays}, {@code glDrawElements}, {@code glArrayElement} — Draw from enabled client arrays.</li>
 *   <li>{@code glEnableClientState}, {@code glDisableClientState} — Enable/disable array clients
 *       (VERTEX_ARRAY, COLOR_ARRAY, etc.).</li>
 *   <li>{@code glVertexPointer}, {@code glNormalPointer}, {@code glColorPointer}, {@code glIndexPointer},
 *       {@code glTexCoordPointer}, {@code glEdgeFlagPointer}, {@code glInterleavedArrays} — Bind array data.</li>
 *   <li>{@code glIsList}, {@code glNewList}, {@code glEndList}, {@code glCallList(s)}, {@code glGenLists},
 *       {@code glDeleteLists}, {@code glListBase} — Display list management.</li>
 * </ul>
 *
 * <h2>Viewport, selection & feedback</h2>
 * <ul>
 *   <li>{@code glViewport} — Set viewport rectangle.</li>
 *   <li>{@code glSelectBuffer}, {@code glRenderMode} — Selection rendering mode and hit-record buffer.</li>
 *   <li>{@code glInitNames}, {@code glLoadName}, {@code glPushName}, {@code glPopName} — Name stack for selection.</li>
 *   <li>{@code glFeedbackBuffer}, {@code glPassThrough} — Feedback mode and user markers.</li>
 * </ul>
 *
 * <h2>Raster positions & rectangle helpers</h2>
 * <ul>
 *   <li>{@code glRasterPos*} — Set the current raster position for pixel transfers.</li>
 *   <li>{@code glRect*} — Convenience helpers to draw axis-aligned rectangles.</li>
 * </ul>
 *
 * <h2>Pixel transfer, storage & operations</h2>
 * <ul>
 *   <li>{@code glPixelStorei/f} — Pixel unpack/pack alignment and row length controls.</li>
 *   <li>{@code glPixelTransferi/f}, {@code glPixelZoom} — Pixel transfer scales/bias and zoom.</li>
 *   <li>{@code glDrawPixels}, {@code glReadPixels}, {@code glCopyPixels} — Image I/O to/from the framebuffer.</li>
 *   <li>{@code glGetPixelMap*} — Retrieve pixel transfer maps.</li>
 * </ul>
 *
 * <h2>Texturing</h2>
 * <ul>
 *   <li>{@code glBindTexture}, {@code glGenTextures}, {@code glDeleteTextures}, {@code glIsTexture} — Texture object management.</li>
 *   <li>{@code glAreTexturesResident}, {@code glPrioritizeTextures} — Residency hints and priorities.</li>
 *   <li>{@code glTexImage1D/2D}, {@code glTexSubImage1D/2D} — Define/replace texture images.</li>
 *   <li>{@code glCopyTexImage1D/2D}, {@code glCopyTexSubImage1D/2D} — Define/replace textures from framebuffer.</li>
 *   <li>{@code glTexParameter*i/f/v} — Set texture parameters (wrap, filter, border color, etc.).</li>
 *   <li>{@code glTexEnv*i/f/v} — Fixed-function texture environment/combiner setup.</li>
 *   <li>{@code glTexGen*i/f/d/v} — Texture coordinate generation modes/planes.</li>
 *   <li>{@code glGetTexImage}, {@code glGetTexLevelParameter*i/f}, {@code glGetTexParameter*i/f} — Texture queries.</li>
 * </ul>
 *
 * <h2>Lighting & materials</h2>
 * <ul>
 *   <li>{@code glLight*i/f/v}, {@code glLightModel*i/f/v} — Light source and global lighting parameters.</li>
 *   <li>{@code glMaterial*i/f/v}, {@code glColorMaterial} — Per-material appearance and color-material binding.</li>
 *   <li>{@code glGetLight*i/f/v}, {@code glGetMaterial*i/f/v} — Lighting/material queries.</li>
 * </ul>
 *
 * <h2>Colors & indices</h2>
 * <ul>
 *   <li>{@code glColor3*}, {@code glColor4*}, {@code glColorMask} — Set current color, enable/disable color channels.</li>
 *   <li>{@code glIndex*}, {@code glIndexMask} — Color index mode support.</li>
 * </ul>
 *
 * <h2>Evaluators (curves & surfaces)</h2>
 * <ul>
 *   <li>{@code glMap1*}, {@code glMap2*} — Define 1D/2D evaluators for vertices, normals, colors, texcoords.</li>
 *   <li>{@code glMapGrid1*}, {@code glMapGrid2*} — Define evaluation grids.</li>
 *   <li>{@code glEvalCoord*}, {@code glEvalPoint*}, {@code glEvalMesh*} — Evaluate and render from maps.</li>
 *   <li>{@code glGetMap*} — Query evaluator definitions.</li>
 * </ul>
 *
 * <h2>Queries & information</h2>
 * <ul>
 *   <li>{@code glGetBoolean*v}, {@code glGetInteger*v}, {@code glGetFloat*v}, {@code glGetDouble*v} — Generic state queries.</li>
 *   <li>{@code glGetPointerv} / {@code glGetPointer} — Retrieve current array pointers.</li>
 *   <li>{@code glGetClipPlane} — Retrieve user clip plane equations.</li>
 *   <li>{@code glGetTexEnv*}, {@code glGetTexGen*}, {@code glGetTexParameter*}, {@code glGetTexLevelParameter*} — Texture state queries.</li>
 *   <li>{@code glGetPixelMap*}, {@code glGetPolygonStipple} — Pixel/polygon stipple queries.</li>
 *   <li>{@code glIsList}, {@code glIsTexture} — Object existence tests.</li>
 * </ul>
 *
 * <p><b>Notes:</b> Methods listed with a trailing {@code *} denote families with multiple numeric or vector
 * overloads (e.g., {@code glColor3f}, {@code glColor3fv}, {@code glColor3ub}, etc.). Where both “core”
 * and sub-package variants exist (e.g., {@code glTexImage2D} and {@code glTexImage2D_CORE}), the accessor
 * exposes the flavor-appropriate interfaces as part of its extends list.</p>
 */