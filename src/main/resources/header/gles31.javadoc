/**
 * OpenGL ES 3.1 Accessor — Compute shaders, indirect draws, program pipelines with
 * program-scope uniform updates, image load/store with memory barriers, multisample
 * texture storage, indexed state queries, and the vertex-attrib binding model.
 *
 * <p>Extends {@link GLES30Accessor} with a modern, GPU-driven workflow: dispatch compute
 * workloads, issue draws from parameter buffers, configure separable programs/pipelines,
 * and write to textures from shaders with explicit synchronization.</p>
 *
 * <h2>Compute & Indirect Drawing</h2>
 * <ul>
 *   <li>{@code glDispatchCompute}, {@code glDispatchComputeIndirect} — Launch compute work groups,
 *       optionally with parameters sourced from a buffer for GPU-driven dispatch.</li>
 *   <li>{@code glDrawArraysIndirect}, {@code glDrawElementsIndirect} — Issue draw calls whose arguments
 *       live in a buffer object (pairs well with compute that builds command buffers).</li>
 * </ul>
 *
 * <h2>Program Pipelines & Separable Programs</h2>
 * <ul>
 *   <li>{@code glUseProgramStages}, {@code glActiveShaderProgram}, {@code glCreateShaderProgramv} —
 *       Create separable programs, select the active one for program-uniform updates, and bind
 *       stages into a pipeline.</li>
 *   <li>{@code glBindProgramPipeline}, {@code glGenProgramPipelines}, {@code glDeleteProgramPipelines},
 *       {@code glIsProgramPipeline} — Manage program pipeline objects.</li>
 *   <li>{@code glGetProgramPipelineiv}/{@code glGetProgramPipelinei}, {@code glValidateProgramPipeline},
 *       {@code glGetProgramPipelineInfoLog} — Inspect and validate pipelines.</li>
 * </ul>
 *
 * <h2>Program-Scoped Uniform Updates</h2>
 * <ul>
 *   <li>{@code glProgramUniform1/2/3/4i/ui/f} and vector/matrix variants —
 *       Set uniforms on a specific program object without rebinding it via {@code glUseProgram}.</li>
 * </ul>
 *
 * <h2>Program Interface Introspection</h2>
 * <ul>
 *   <li>{@code glGetProgramInterfaceiv}/{@code glGetProgramInterfacei},
 *       {@code glGetProgramResourceIndex}, {@code glGetProgramResourceName},
 *       {@code glGetProgramResourceiv}, {@code glGetProgramResourceLocation} —
 *       Query active resources (uniforms/blocks, inputs/outputs, images, buffers) of a program.</li>
 * </ul>
 *
 * <h2>Image Load/Store & Memory Barriers</h2>
 * <ul>
 *   <li>{@code glBindImageTexture} — Bind a texture level/layer to an image unit with read/write access for shaders.</li>
 *   <li>{@code glMemoryBarrier}, {@code glMemoryBarrierByRegion} — Establish ordering/visibility between shader
 *       writes and subsequent reads to avoid data hazards (regional barrier affects overlapping pixels/tiles only).</li>
 * </ul>
 *
 * <h2>Multisample & Framebuffer Parameters</h2>
 * <ul>
 *   <li>{@code glTexStorage2DMultisample} — Immutable storage for multisample textures.</li>
 *   <li>{@code glGetMultisamplefv}/{@code glGetMultisamplef}, {@code glSampleMaski} — Query sample positions and
 *       control sample coverage masks.</li>
 *   <li>{@code glFramebufferParameteri}, {@code glGetFramebufferParameteriv}/{@code glGetFramebufferParameteri} —
 *       Set/query default FBO parameters (width/height/samples/layers).</li>
 * </ul>
 *
 * <h2>Texture Level Parameters</h2>
 * <ul>
 *   <li>{@code glGetTexLevelParameteriv}/{@code glGetTexLevelParameteri},
 *       {@code glGetTexLevelParameterfv}/{@code glGetTexLevelParameterf} —
 *       Query size/format/other properties of a specific texture level.</li>
 * </ul>
 *
 * <h2>Vertex Attrib Binding Model</h2>
 * <ul>
 *   <li>{@code glBindVertexBuffer} — Bind a buffer to a VAO binding index with offset/stride.</li>
 *   <li>{@code glVertexAttribFormat}, {@code glVertexAttribIFormat} — Describe per-attribute layout
 *       (normalized, integer variants) independent of buffer bindings.</li>
 *   <li>{@code glVertexAttribBinding} — Route attribute indices to binding indices.</li>
 *   <li>{@code glVertexBindingDivisor} — Set per-binding instancing divisors.</li>
 * </ul>
 *
 * <h2>Indexed State Queries</h2>
 * <ul>
 *   <li>{@code glGetBooleani_v}/{@code glGetBooleani} — Read indexed boolean state (e.g., per-viewport/per-attachment).</li>
 * </ul>
 *
 * <h3>Notes</h3>
 * <ul>
 *   <li>When using image load/store or compute-generated geometry/textures, insert the appropriate
 *       memory barriers before consumers execute.</li>
 *   <li>Indirect draws and program pipelines enable multi-stage, GPU-driven engines with minimal CPU overhead.</li>
 *   <li>The vertex-attrib binding model decouples format from buffer binding, making VAO updates cheaper and clearer.</li>
 * </ul>
 */
