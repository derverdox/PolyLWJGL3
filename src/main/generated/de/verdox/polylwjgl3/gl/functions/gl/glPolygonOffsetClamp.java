package de.verdox.polylwjgl3.gl.functions.gl;

import de.verdox.polylwjgl3.gl.accessor.gl45.GL45Accessor;
import de.verdox.polylwjgl3.gl.accessor.gl45.GL45AccessorImpl;
import java.nio.*;
import javax.annotation.*;
import org.jetbrains.annotations.*;
import org.lwjgl.opengl.GL46;
import org.lwjgl.system.*;

public interface glPolygonOffsetClamp {

/**
 * The depth values of all fragments generated by the rasterization of a polygon may be offset by a single value that is computed for that polygon. This
 * function determines this value.
 *
 * <p>{@code factor} scales the maximum depth slope of the polygon, and {@code units} scales an implementation-dependent constant that relates to the usable
 * resolution of the depth buffer. The resulting values are summed to produce the polygon offset value, which may then be clamped to a minimum or maximum
 * value specified by {@code clamp}.</p>
 *
 * <p>The values {@code factor}, {@code units}, and {@code clamp} may each be positive, negative, or zero. Calling the command {@link GL11C#glPolygonOffset PolygonOffset} is equivalent
 * to calling the command {@code PolygonOffsetClamp} with clamp equal to zero.</p>
 *
 * @param factor scales the maximum depth slope of the polygon
 * @param units  scales an implementation-dependent constant that relates to the usable resolution of the depth buffer
 * @param clamp  the minimum or maximum polygon offset value
 *
 * @see <a href="https://docs.gl/gl4/glPolygonOffsetClamp">Reference Page</a>
 */
    public void glPolygonOffsetClamp(@NativeType("GLfloat") float factor, @NativeType("GLfloat") float units, @NativeType("GLfloat") float clamp);

}
